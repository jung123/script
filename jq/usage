jq utility 사용후기.

"속성 이름" : "속성" 	-> 해당 규칙을 따르는 것 같다.

1. jq에 일반적으로 넘겨주는 방법
	#> echo '{"foo":"bar"}' | jq '.'
	위와 같이 파이프를 이용하여 넘겨주는 방법 혹은 파일을 읽는 방법 여러가지를 사용한다.
	파이프를 이용하는 방법이 가장 간단해보인다.

2. 홑따옴표 사용하기
	#> echo 'String' | jq '.'		>> 틀린 방법
	#> echo '"String"' | jq '.'		>> 올바른 방법
	셸위에서 따옴표 처리하는 것은 헷갈리는 부분이다.
	echo의 인자를 홑따옴표로 감싸고 내부에서 다시 json 인자들을 다시 쌍따옴표 감싸주어야 한다.

3. 오브젝트 속성 필터 (object identifiter-index)
	#> echo '{ "foo":"bar", "hoge":"piyo" }' | jq '.foo'
	#> "bar"
	위와 같이 "foo" 속성의 값인 "bar"이 출력된다.

4. 오브젝트안의 오브젝트 안의 오브젝트의 속성을 가져오기
	#> echo '{"a": {"b": {"c": "d"}}}' | jq '.'
	{
	  	"a": {
		      	"b": {
				        	"c": "d"
						    	}
							  	}
	}
	#> echo '{"a": {"b": {"c": "d"}}}' | jq '.a'
	{
	  	"b": {
		      	"c": "d"
			    	}
	}
	#> echo '{"a": {"b": {"c": "d"}}}' | jq '.a.b'
	{
	  	"c": "d"
	}
	#> echo '{"a": {"b": {"c": "d"}}}' | jq '.a.b.c'
	위와 같이 속성 이름 내부의 속성이름 중 하나를 지정하여 가져올 수 있다.

5. 파이프 연산자: 마지막 출력을 다시 입력으로 넘겨주는 연산자
	jq 문법에서도 '|' 파이프 연산자가 존재한다.
	마지막 출력을 입력으로 넘겨받아 다시 처리한다.
	* 파이프 연산자가 jq에 넘겨지는 첫 번째 인자 문자열의 일부가 되어야 한다.
	#> echo '"foo"' | jq '. | .'
	"foo"
	#> echo '{"a": {"b": {"c": "d"}}}' | jq '.a | .b | .c'
	"d"
	파이프라인을 이용하면 이렇게 된다.


6. 컴팩트 옵션을 사용하여 내부 오브젝트를 가져온다.
	#> echo '{"a": {"b": {"c": "d"}}}' | jq -c '.a'
	{"b":{"c":"d"}}

	#> echo '{"a": {"b": {"c": "d"}}}' | jq '.a'
	{
		  "b": {
			      "c": "d"
				    }
	}
	위와 같이 컴팩트 옵션을 주느냐에 따라서 출력되는 형식이 달라진다.

7. 배열 인덱스 필터
	배열 인덱스 필터는 배열에서 n번째 값을 가져오는 필터입니다.
	#> echo '{"foo":[0, 11, 22, 33, 44, 55]}' | jq '.foo | [1]'
	[
		1
	]
	#> echo '{"foo":[0, 11, 22, 33, 44, 55]}' | jq '.foo'
	[
		0,
		11,
		22,
		33,
		44,
		55
	]
	배열 인덱스를 지정할 수 있다. 그리고 jq의 파이프 라인을 사용하면 된다.
	그런데 .foo.[1] 이렇게 출력이 가능하다.

	* 명시적으로 파이프 연산자 사용.
	'.'은 입력 자체를 풀어서 해석할 수 있다.
	$ jq -cn '{"data": [0, 11, 22, 33, 44 ,55]}.data'
	[0,11,22,33,44,55]
	위와 같이 처리될 수 있다.
	.의 역할은 동일값 필터가 되고 이후에 문자열이 따라오면 동일값 필터와 속성 연산자 두 가지 역알
	수행한다.

8. 다수의 입력과 다수의 출력을 수행
	#> echo '{"foo" : ["1", "2", 3, 4]}' | jq '.foo | .[]'
	"1"
	"2"
	3
	4
	위의 동작은 각각을 iteration하며 처리한 것으로 생각할 수 있다.

	jq는 여러개의 json 문서를 입력으로 받을 수 있다는 것을 의미한다.
	#>  echo '{"name": "john"} {"name": "merry", "age": 24}' | jq '.'
	{
		  "name": "john"
	}
	{
		  "name": "merry",
		    "age": 24
	}
	#>  echo '{"name": "john"} {"name": "merry", "age": 24}' | jq '.name'
	"john"
	"merry"
	위와 같이 여러개의 json 문서를 입력으로 받아 각각에서 name의 속성 이름을 가진 오브젝트를 반환한다.

9. 배열 반복자 ( Array Iterator ) --> 이게 제일 중요해보인다.




	

. 배열 속성의 인덱스 지정은 어떻게 하는 걸까?
